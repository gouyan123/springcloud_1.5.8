# 上下文初始化加载
spring:
  profiles:
    active: dev
---
spring:
  profiles: dev
server:
  port: 8761
eureka:
  instance:
    ######################### 续约 心跳 下线 #########################
    # 心跳，租约续约频率，单位：秒
    lease-renewal-interval-in-seconds: 30
    # eureka server多久没有收到心跳，则表示对应的实例过期，单位：秒
    lease-expiration-duration-in-seconds: 90
  client:
    # 该实例是否向 Eureka  Server注册自己
    registerWithEureka: true
    serviceUrl:
      # 配置 Eureka-Server 地址
      defaultZone: http://localhost:${server.port}/eureka/
    #cache-refresh-executor-exponential-back-off-bound: 10
    ######################### 续约 心跳 下线 #########################
    # 该实例是否从 Eureka 服务器获取所有的注册信息
    fetchRegistry: true
    # 从 Eureka-Server 拉取注册服务实例信息频率，默认：30 秒
    registry-fetch-interval-seconds: 30
    # 是否禁用增量获取服务实例注册信息
    # eureka.disableDelta: false
    ######################### 缓存         #########################

    #########################EurekaServer集群同步相关#########################
    # 初始化实例信息到Eureka服务端的间隔时间，单位为秒
    initial-instance-info-replication-interval-seconds: 40
    # 更新实例信息的变化到Eureka服务端的间隔时间，单位为秒
    instance-info-replication-interval-seconds: 30
  server:
    ######################### 续约 心跳 下线 #########################
    # Eureka Server端服务实例租约过期定时任务执行频率
    eviction-interval-timer-in-ms: 60
    ######################### 缓存         #########################
    # 是否开启只读请求响应缓存，响应缓存 ( ResponseCache ) 机制目前使用两层缓存策略：优先读取只读缓存，读取不到后读取固定过期的读写缓存；
    use-read-only-response-cache: false
    # 只读缓存更新频率，单位：毫秒。只读缓存定时更新任务只更新读取过请求 ，因此虽然永不过期，也会存在读取不到的情况。
    #response-cache-update-interval-ms: 30
    #getResponseCacheAutoExpirationInSeconds() ：读写缓存写入后过期时间，单位：秒。
    response-cache-auto-expiration-in-seconds: 60
    # 移除队列里过期的租约变更记录的定时任务执行频率，单位：毫秒。默认值 ：30 * 1000 毫秒。
    delta-retention-timer-interval-in-ms: 30
    # 租约变更记录过期时长，单位：毫秒。默认值 ： 3 * 60 * 1000 毫秒。
    retention-time-in-m-s-in-delta-queue: 180000
    #########################EurekaServer自我保护机制#########################
    # 默认关闭自我保护模式
    enable-self-preservation: false
    # 1分钟收到服务实例 < 阈值(当前服务实例数 * 2 * 自我保护系数)
    renewal-percent-threshold: 0.85
    #自我保护模式比例更新定时任务执行频率
    renewal-threshold-update-interval-ms: 900
    #########################EurekaServer集群同步相关#########################
    # Eureka-Server启动时，从远程 Eureka-Server读取不到注册信息时，多长时间不允许 Eureka-Client 访问[5分钟]
    #wait-time-in-ms-when-sync-empty: 18000000
    #Eureka-Server 集群节点更新频率，单位：毫秒。
    #peer-eureka-nodes-update-interval-ms: 3600000
---
spring:
  profiles: eureka1
server:
  port: 8761
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka1:8761/eureka/,http://eureka2:8762/eureka/,http://eureka3:8763/eureka/
  server:
    waitTimeInMsWhenSyncEmpty: 0
  instance:
    hostname: eureka1
    metadataMap: 
      instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}

---
spring:
  profiles: eureka2
server:
  port: 8762
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka1:8761/eureka/,http://eureka2:8762/eureka/,http://eureka3:8763/eureka/
  server:
    waitTimeInMsWhenSyncEmpty: 0
  instance:
    hostname: eureka2
    metadataMap: 
      instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}


---
spring:
  profiles: eureka3
server:
  port: 8763
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka1:8761/eureka/,http://eureka2:8762/eureka/,http://eureka3:8763/eureka/
  server:
    waitTimeInMsWhenSyncEmpty: 0
  instance:
    hostname: eureka3
    metadataMap: 
      instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
